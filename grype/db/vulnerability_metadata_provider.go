package db

import (
	"encoding/json"
	"fmt"
	"github.com/nscuro/ossindex-client"
	"io/ioutil"
	"path"
	"strings"

	grypeDB "github.com/anchore/grype/grype/db/v4"
	"github.com/anchore/grype/grype/vulnerability"
)

var _ vulnerability.MetadataProvider = (*VulnerabilityMetadataProvider)(nil)

type VulnerabilityMetadataProvider struct {
	reader grypeDB.VulnerabilityMetadataStoreReader
}

func NewVulnerabilityMetadataProvider(reader grypeDB.VulnerabilityMetadataStoreReader) *VulnerabilityMetadataProvider {
	return &VulnerabilityMetadataProvider{
		reader: reader,
	}
}

func (pr *VulnerabilityMetadataProvider) GetMetadata(id, namespace string) (*vulnerability.Metadata, error) {
	// qdh solution for OSSI metadata
	if namespace == "ossi" {
		// prefer NVD
		nvd, _ := pr.reader.GetVulnerabilityMetadata(id, "nvd")
		ghsa, _ := pr.reader.GetVulnerabilityMetadata(id, "github:java")
		if ghsa != nil {
		}
		if nvd != nil {
			return vulnerability.NewMetadata(nvd)
		}

		fname := id
		fname = strings.ReplaceAll(fname, "-", "/")
		fpath := path.Join(".workspace", "ossi", "vulns", fname, id+".json")

		v := ossindex.Vulnerability{}
		data, err := ioutil.ReadFile(fpath)
		if err != nil {
			return pr.GetMetadata(id, "nvd")
		}
		err = json.Unmarshal(data, &v)
		if err != nil {
			return pr.GetMetadata(id, "nvd")
		}

		return vulnerability.NewMetadata(&grypeDB.VulnerabilityMetadata{
			ID:           v.ID,
			Namespace:    "ossi",
			DataSource:   v.Reference,
			RecordSource: "",
			Severity:     vulnerability.FromCvssScore(v.CVSSScore).String(),
			URLs:         []string{v.Reference},
			Description:  v.Description,
			Cvss: []grypeDB.Cvss{{
				VendorMetadata: nil,
				Metrics: grypeDB.CvssMetrics{
					BaseScore:           v.CVSSScore,
					ExploitabilityScore: nil,
					ImpactScore:         nil,
				},
				Vector: v.CVSSVector,
				//Version:        v.cvs,
			}},
		})
	}

	metadata, err := pr.reader.GetVulnerabilityMetadata(id, namespace)
	if err != nil {
		return nil, fmt.Errorf("metadata provider failed to fetch id='%s' recordsource='%s': %w", id, namespace, err)
	}

	return vulnerability.NewMetadata(metadata)
}
